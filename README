Pinplay
Allows us to maintain the same program execution behaviour across multiple runs. To achieve that it generates Pinballs. Pinballs are generated once by running an executable with input data. Then for further runs or debuging or simulation of the same executable and input data, we dont require executable and input data. Pinball essesntialy replaces input data and binary. Pinballs offer the repeatability of execution. 
Pintool is used to generate pinballs. Default pintool enabled for pinplay is provided in pin_kit. 
Pinpoint is an enhanced version of Simpoint. The pinpoint software pipeline use the Pinplay, Pintool and Simpoint
The phases of generating is as follows, terms will be detailed later:
Any Pintool (enabled with pinplay) + Program + Input Data → Whole_program_pinball
Whole_program_pinball → BBV
BBV + Simpoint tool → Pinpoint
Pinpoint + Tracer Pintool (enabled with pinplay)  → Region Pinballs + Trace (from pintool, our goal)

There are scripts that can do all the above steps easily:
Run help to understand each of the given options.
This will generate *.pp folder, its out pinpoint folder. The pintool i have used is pinplay-driver.so. The cpp is in pinplay/examples directory. To build pintool run make. The following script is in pinplay/scripts directory. 
 python3 pinpoints.py --pinplayhome=$PIN_HOME 
-l -r -b -s -p -R --ldv 
--program_name=cc 
--input_name=g15 
--command="/media/pravesh/A/Champsim2/tracer/pin/gapbs-exp/./cc -g15" 
--mode=mt

Moving on to generate the trace, we need our tracer, It is in the examples directory as well.
Following script replay the execution from pinball files (you can use whole_program_pinball or *.pp region pinball directory). In the following example we have give cc.g15_702535.pp as the pinball (region pinball) input  and champsim.so our tracer. This will generate trace with the help of champsim.so pintool. See we can use the pinball as the replcament for input proragm + data.
./replay_dir.py --pintool=champsim.so --replay_dir=cc.g15_702535.pp

-----------------------------------------------------------------------------------------------------------------------------------------------------


To try out PinPlay: 
------------------
No installation should be necessry as pre-built tools (pinplay-driver.so and
pinplay-branch-predictor.so) are included in the PinPlay kit.

If the pre-built tools do not work for you:
 cd examples
 make instclean
 make

This will build the tools pinplay-driver.so and 
pinplay-branch-predictor.so,  create and 
build 'hello', run it with 'pinplay-driver.so -log' to 
create a pinball, and run 'pinplay-driver.so -replay' 
and 'pinplay-branch-predictor.so -replay' 
to run off the pinball. 
*******************************************************

To make your Pin tool PinPlay-enabled, you need to modify 
your tool's main() and link in libpinplay.a, libbz2.a, 
and libzlib.a.

Pre-requisites:
 * Your Pin tool should not try to change control flow 
   of the program.
 
Pintool source changes:
==========================
#include "pinplay.H"
PINPLAY_ENGINE pinplay_engine;
KNOB<BOOL> KnobPinPlayLogger(KNOB_MODE_WRITEONCE, 
                      "pintool", "log", "0",
                      "Activate the pinplay logger");
KNOB<BOOL> KnobPinPlayReplayer(KNOB_MODE_WRITEONCE, 
                      "pintool", "replay", "0",
                      "Activate the pinplay replayer");

main()
{
..
pinplay_engine.Activate(argc, argv, 
    KnobPinPlayLogger, KnobPinPlayReplayer);
..
}

Pintool build changes:
======================
Set shell variable PIN_KIT to point to the root of 
the Pin kit.

makefile:
--------
PINPLAY_HOME=$(PIN_KIT)/extras/pinplay/
PINPLAY_INCLUDE_HOME=$(PINPLAY_HOME)/include
PINPLAY_LIB_HOME=$(PINPLAY_HOME)/lib/$(TARGET_LONG)
EXT_LIB_HOME=$(PINPLAY_HOME)/lib-ext/$(TARGET_LONG)

CXXFLAGS += -I$(PINPLAY_INCLUDE_HOME)


linking: link in $(PINPLAY_LIB_HOME)/libpinplay.a, 
    $(EXT_LIB_HOME)/libbz2.a, $(EXT_LIB_HOME)/libzlib.a, $(CONTROLLERLIB) 

where:
$(CONTROLLERLIB):
	$(MAKE) -C $(TOOLS_ROOT)/InstLib dir $(OBJDIR)controller$(LIB_SUFFIX)

  

Pintool run command changes:
============================

 pintool + pinplay logger:
 -------------------------

   % pin -t your-tool.so -log -log:basename pinball/foo -- test-app

 pintool + pinplay replayer:
 ---------------------------
   % pin -xyzzy -reserve_memory pinball/foo.address -t your-tool.so -replay -replay:basename pinball/foo -- $PIN_KIT/extrans/pinplay/bin/intel64/nullapp  [for intel64 pinballs]

   % pin -xyzzy -reserve_memory pinball/foo.address -t your-tool.so -replay -replay:basename pinball/foo -- $PIN_KIT/extrans/pinplay/bin/ia32/nullapp  [for ia32 pinballs]
